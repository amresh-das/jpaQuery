package com.huskycode.jpaquery.persister.store;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

import com.huskycode.jpaquery.types.tree.EntityNode;

/**
 * Store a value to propagate into each entity node. For performance 
 * reason, we are going to use equality by each entity node instance. 
 * If the EntityNode are generated by the solver, that should be the
 * case anyway.
 * 
 *  @author Varokas Panusuwan
 */
public class PropogatedValueStore {
	
	private final Map<EntityNodeInstanceWrapper, Map<Field, Object>> dataStore 
	 	= new HashMap<EntityNodeInstanceWrapper, Map<Field, Object>>();

	public Object putValue(EntityNode entityNode, Field f, Object value) {
		EntityNodeInstanceWrapper key = createKey(entityNode);
		Map<Field, Object> map = getValueOrCreateIfNotExist(key);
		
		return map.put(f, value);
	}
	
	public Map<Field, Object> get(EntityNode entityNode) {
		EntityNodeInstanceWrapper key = createKey(entityNode);
		return getValueOrCreateIfNotExist(key);
	}
	
	private Map<Field, Object> getValueOrCreateIfNotExist(EntityNodeInstanceWrapper key) {
		Map<Field, Object> retVal = dataStore.get(key);
		if(retVal == null) {
			HashMap<Field, Object> newValue = new HashMap<Field, Object>();
			dataStore.put(key, newValue);
			return newValue;
		} else {
			return retVal;
		}
	}
	
	private EntityNodeInstanceWrapper createKey(EntityNode entityNode) { 
		return new EntityNodeInstanceWrapper(entityNode);
	}
	
	/**
	 * A wrapper for an instance of EntityNode
	 */
	private class EntityNodeInstanceWrapper {
		private final EntityNode entityNode;

		public EntityNodeInstanceWrapper(EntityNode entityNode) {
			super();
			this.entityNode = entityNode;
		}

		public EntityNode getEntityNode() {
			return entityNode;
		}

		@Override
		public int hashCode() {
			return entityNode.hashCode();
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			EntityNodeInstanceWrapper other = (EntityNodeInstanceWrapper) obj;
			return (entityNode == other.entityNode);
		} 
	}
}
